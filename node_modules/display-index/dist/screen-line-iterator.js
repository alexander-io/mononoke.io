'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _pointHelpers = require('./point-helpers');

var ScreenLineIterator = (function () {
  function ScreenLineIterator(tree) {
    _classCallCheck(this, ScreenLineIterator);

    this.tree = tree;
  }

  _createClass(ScreenLineIterator, [{
    key: 'reset',
    value: function reset() {
      this.leftAncestor = null;
      this.leftAncestorRow = -1;
      this.leftAncestorBufferEnd = _pointHelpers.ZERO_POINT;
      this.leftAncestorStack = [];
      this.leftAncestorRowStack = [];
      this.leftAncestorBufferEndStack = [];
      this.rightAncestorCount = 0;
      this.currentScreenRow = 0;
      this.currentLineBufferStart = _pointHelpers.ZERO_POINT;
      this.currentLineBufferEnd = _pointHelpers.ZERO_POINT;
      this.setCurrentNode(this.tree.root);
    }
  }, {
    key: 'findNode',
    value: function findNode(row) {
      this.reset();

      if (!this.currentNode) return null;

      while (true) {
        if (row < this.currentScreenRow) {
          if (this.currentNode.left) {
            this.descendLeft();
          } else {
            return null;
          }
        } else if (row === this.currentScreenRow) {
          return this.currentNode;
        } else {
          // row > this.currentScreenRow
          if (this.currentNode.right) {
            this.descendRight();
          } else {
            return null;
          }
        }
      }
    }
  }, {
    key: 'seekToScreenRow',
    value: function seekToScreenRow(screenRow) {
      return this.findNode(screenRow) != null;
    }
  }, {
    key: 'seekToBufferPosition',
    value: function seekToBufferPosition(targetPosition) {
      this.reset();

      if (!this.currentNode) return null;

      while (true) {
        if ((0, _pointHelpers.compare)(targetPosition, this.currentLineBufferStart) <= 0) {
          if (this.currentNode.left) {
            this.descendLeft();
          } else {
            break;
          }
        } else {
          if ((0, _pointHelpers.compare)(targetPosition, this.currentLineBufferEnd) <= 0) {
            break;
          } else if (this.currentNode.right) {
            this.descendRight();
          } else {
            break;
          }
        }
      }

      if ((0, _pointHelpers.compare)(targetPosition, this.currentLineBufferEnd) === 0 && !(0, _pointHelpers.isZero)(this.currentNode.bufferExtent)) {
        this.moveToSuccessor();
      }
    }
  }, {
    key: 'moveToSuccessor',
    value: function moveToSuccessor() {
      if (!this.currentNode) return false;
      if (!this.currentNode.right && this.rightAncestorCount === 0) return false;

      if (this.currentNode.right) {
        this.descendRight();
        while (this.currentNode.left) {
          this.descendLeft();
        }
      } else {
        while (this.currentNode.parent && this.currentNode.parent.right === this.currentNode) {
          this.ascend();
        }
        this.ascend();
      }

      return true;
    }
  }, {
    key: 'moveToPredecessor',
    value: function moveToPredecessor() {
      if (!this.currentNode) return false;
      if (!this.currentNode.left && !this.leftAncestor) return false;

      if (this.currentNode.left) {
        this.descendLeft();
        while (this.currentNode.right) {
          this.descendRight();
        }
      } else {
        while (this.currentNode.parent && this.currentNode.parent.left === this.currentNode) {
          this.ascend();
        }
        this.ascend();
      }

      return true;
    }
  }, {
    key: 'getScreenRow',
    value: function getScreenRow() {
      return this.currentScreenRow;
    }
  }, {
    key: 'getScreenLineLength',
    value: function getScreenLineLength() {
      return this.currentNode.screenExtent;
    }
  }, {
    key: 'getBufferStart',
    value: function getBufferStart() {
      return this.currentLineBufferStart;
    }
  }, {
    key: 'getBufferEnd',
    value: function getBufferEnd() {
      return this.currentLineBufferEnd;
    }
  }, {
    key: 'getTokens',
    value: function getTokens() {
      return this.currentNode ? this.currentNode.tokens : null;
    }
  }, {
    key: 'getId',
    value: function getId() {
      return this.currentNode ? this.currentNode.id : null;
    }
  }, {
    key: 'isSoftWrappedAtStart',
    value: function isSoftWrappedAtStart() {
      return this.currentNode ? this.currentNode.softWrappedAtStart : false;
    }
  }, {
    key: 'isSoftWrappedAtEnd',
    value: function isSoftWrappedAtEnd() {
      return this.currentNode ? this.currentNode.softWrappedAtEnd : false;
    }
  }, {
    key: 'getScreenPositionWithMaxLineLength',
    value: function getScreenPositionWithMaxLineLength() {
      this.reset();

      if (!this.currentNode) return null;

      var maxScreenExtent = this.currentNode.maxScreenExtent;
      while (true) {
        if (this.currentNode.screenExtent === maxScreenExtent) {
          return { row: this.currentScreenRow, column: maxScreenExtent };
        } else if (this.currentNode.left && this.currentNode.left.maxScreenExtent === maxScreenExtent) {
          this.descendLeft();
        } else {
          this.descendRight();
        }
      }
    }
  }, {
    key: 'setCurrentNode',
    value: function setCurrentNode(node) {
      this.currentNode = node;
      if (this.currentNode) {
        this.currentScreenRow = this.leftAncestorRow + this.currentNode.getLeftSubtreeRowCount() + 1;
        this.currentLineBufferStart = (0, _pointHelpers.traverse)(this.leftAncestorBufferEnd, this.currentNode.getLeftSubtreeBufferExtent());
        this.currentLineBufferEnd = (0, _pointHelpers.traverse)(this.currentLineBufferStart, this.currentNode.bufferExtent);
      }
    }
  }, {
    key: 'descendLeft',
    value: function descendLeft() {
      this.rightAncestorCount++;
      this.setCurrentNode(this.currentNode.left);
    }
  }, {
    key: 'descendRight',
    value: function descendRight() {
      this.pushToAncestorStacks();
      this.leftAncestor = this.currentNode;
      this.leftAncestorRow = this.currentScreenRow;
      this.leftAncestorBufferEnd = this.currentLineBufferEnd;
      this.setCurrentNode(this.currentNode.right);
    }
  }, {
    key: 'ascend',
    value: function ascend() {
      if (this.currentNode === this.currentNode.parent.right) {
        this.leftAncestor = this.leftAncestorStack.pop();
        this.leftAncestorRow = this.leftAncestorRowStack.pop();
        this.leftAncestorBufferEnd = this.leftAncestorBufferEndStack.pop();
      } else {
        this.rightAncestorCount--;
      }

      this.setCurrentNode(this.currentNode.parent);
    }
  }, {
    key: 'pushToAncestorStacks',
    value: function pushToAncestorStacks() {
      this.leftAncestorStack.push(this.leftAncestor);
      this.leftAncestorRowStack.push(this.leftAncestorRow);
      this.leftAncestorBufferEndStack.push(this.leftAncestorBufferEnd);
    }
  }]);

  return ScreenLineIterator;
})();

exports['default'] = ScreenLineIterator;
module.exports = exports['default'];