'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _randomSeed = require('random-seed');

var _randomSeed2 = _interopRequireDefault(_randomSeed);

var _screenLineIterator = require('./screen-line-iterator');

var _screenLineIterator2 = _interopRequireDefault(_screenLineIterator);

var _tokenIterator = require('./token-iterator');

var _tokenIterator2 = _interopRequireDefault(_tokenIterator);

var _lineNode = require('./line-node');

var _lineNode2 = _interopRequireDefault(_lineNode);

var DisplayIndex = (function () {
  function DisplayIndex(seed) {
    var _this = this;

    _classCallCheck(this, DisplayIndex);

    if (seed != null) {
      (function () {
        var randomGenerator = new _randomSeed2['default'](seed);
        _this.generateRandom = function () {
          var floor = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

          return randomGenerator.floatBetween(floor, 1);
        };
      })();
    }
    this.root = null;
    this.lineIterator = new _screenLineIterator2['default'](this);
  }

  _createClass(DisplayIndex, [{
    key: 'buildTokenIterator',
    value: function buildTokenIterator() {
      return new _tokenIterator2['default'](this);
    }
  }, {
    key: 'buildScreenLineIterator',
    value: function buildScreenLineIterator() {
      return new _screenLineIterator2['default'](this);
    }
  }, {
    key: 'splice',
    value: function splice(startRow, replacementCount, newScreenLines) {
      var startNode = this.lineIterator.findNode(startRow - 1);
      var endNode = this.lineIterator.findNode(startRow + replacementCount);

      if (startNode) {
        startNode.priority = -1;
        this.bubbleNodeUp(startNode);
      }

      if (endNode) {
        endNode.priority = -2;
        this.bubbleNodeUp(endNode);
      }

      var newScreenLinesSubtree = this.buildScreenLinesTree(newScreenLines);
      var oldScreenLinesSubtree = undefined;
      if (startNode) {
        oldScreenLinesSubtree = startNode.right;
        startNode.right = newScreenLinesSubtree;
        if (newScreenLinesSubtree) newScreenLinesSubtree.parent = startNode;
        startNode.computeSubtreeProperties();
      } else if (endNode) {
        oldScreenLinesSubtree = endNode.left;
        endNode.left = newScreenLinesSubtree;
        if (newScreenLinesSubtree) newScreenLinesSubtree.parent = endNode;
      } else {
        oldScreenLinesSubtree = this.root;
        this.root = newScreenLinesSubtree;
      }

      if (endNode) endNode.computeSubtreeProperties();

      if (startNode) {
        startNode.priority = this.generateRandom();
        this.bubbleNodeDown(startNode);
      }

      if (endNode) {
        endNode.priority = this.generateRandom();
        this.bubbleNodeDown(endNode);
      }

      return this.idsForSubtree(oldScreenLinesSubtree);
    }
  }, {
    key: 'idsForSubtree',
    value: function idsForSubtree(node) {
      var ids = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      if (node != null) {
        this.idsForSubtree(node.left, ids);
        ids.push(node.id);
        this.idsForSubtree(node.right, ids);
      }

      return ids;
    }
  }, {
    key: 'getLastScreenRow',
    value: function getLastScreenRow() {
      return this.getScreenLineCount() - 1;
    }
  }, {
    key: 'getScreenLineCount',
    value: function getScreenLineCount() {
      return this.root ? this.root.subtreeRowCount : 0;
    }
  }, {
    key: 'lineLengthForScreenRow',
    value: function lineLengthForScreenRow(row) {
      var node = this.lineIterator.findNode(row);
      if (node) {
        return node.screenExtent;
      } else {
        return null;
      }
    }
  }, {
    key: 'getScreenPositionWithMaxLineLength',
    value: function getScreenPositionWithMaxLineLength() {
      return this.lineIterator.getScreenPositionWithMaxLineLength();
    }
  }, {
    key: 'getScreenLines',
    value: function getScreenLines() {
      var tokenLines = [];
      if (this.root) {
        this.root.appendScreenLines(tokenLines);
      }
      return tokenLines;
    }
  }, {
    key: 'bubbleNodeUp',
    value: function bubbleNodeUp(node) {
      while (node.parent && node.priority < node.parent.priority) {
        if (node === node.parent.left) {
          this.rotateNodeRight(node);
        } else {
          this.rotateNodeLeft(node);
        }
      }
    }
  }, {
    key: 'bubbleNodeDown',
    value: function bubbleNodeDown(node) {
      while (true) {
        var leftChildPriority = node.left ? node.left.priority : Infinity;
        var rightChildPriority = node.right ? node.right.priority : Infinity;

        if (leftChildPriority < rightChildPriority && leftChildPriority < node.priority) {
          this.rotateNodeRight(node.left);
        } else if (rightChildPriority < node.priority) {
          this.rotateNodeLeft(node.right);
        } else {
          break;
        }
      }
    }
  }, {
    key: 'rotateNodeLeft',
    value: function rotateNodeLeft(pivot) {
      var root = pivot.parent;

      if (root.parent) {
        if (root === root.parent.left) {
          root.parent.left = pivot;
        } else {
          root.parent.right = pivot;
        }
      } else {
        this.root = pivot;
      }
      pivot.parent = root.parent;

      root.right = pivot.left;
      if (root.right) {
        root.right.parent = root;
      }

      pivot.left = root;
      pivot.left.parent = pivot;

      root.computeSubtreeProperties();
      pivot.computeSubtreeProperties();
    }
  }, {
    key: 'rotateNodeRight',
    value: function rotateNodeRight(pivot) {
      var root = pivot.parent;

      if (root.parent) {
        if (root === root.parent.left) {
          root.parent.left = pivot;
        } else {
          root.parent.right = pivot;
        }
      } else {
        this.root = pivot;
      }
      pivot.parent = root.parent;

      root.left = pivot.right;
      if (root.left) {
        root.left.parent = root;
      }

      pivot.right = root;
      pivot.right.parent = pivot;

      root.computeSubtreeProperties();
      pivot.computeSubtreeProperties();
    }
  }, {
    key: 'buildScreenLinesTree',
    value: function buildScreenLinesTree(screenLines) {
      var start = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
      var end = arguments.length <= 2 || arguments[2] === undefined ? screenLines.length : arguments[2];
      var parentPriority = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];
      return (function () {
        if (start === end) return;

        var priority = this.generateRandom(parentPriority);
        var middle = Math.floor((start + end) / 2);
        var left = this.buildScreenLinesTree(screenLines, start, middle, priority);
        var right = this.buildScreenLinesTree(screenLines, middle + 1, end, priority);
        var node = new _lineNode2['default'](screenLines[middle], left, right, priority);
        if (left) left.parent = node;
        if (right) right.parent = node;

        return node;
      }).apply(this, arguments);
    }

    // Note: This method is replaced on construction if a random seed is provided
  }, {
    key: 'generateRandom',
    value: function generateRandom() {
      var floor = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      var random = Math.random();
      if (floor > 0) random = random * (1 - floor) + floor;
      return random;
    }
  }]);

  return DisplayIndex;
})();

exports['default'] = DisplayIndex;
module.exports = exports['default'];