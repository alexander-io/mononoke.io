"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Iterator = (function () {
  function Iterator(tree) {
    _classCallCheck(this, Iterator);

    this.tree = tree;
  }

  _createClass(Iterator, [{
    key: "reset",
    value: function reset() {
      this.leftAncestor = null;
      this.leftAncestorRow = -1;
      this.leftAncestorStack = [null];
      this.leftAncestorRowStack = [-1];
      this.currentRow = -1;
      this.setCurrentNode(this.tree.root);
    }
  }, {
    key: "findNode",
    value: function findNode(row) {
      this.reset();

      if (!this.currentNode) return null;

      while (true) {
        if (row < this.currentRow) {
          if (this.currentNode.left) {
            this.descendLeft();
          } else {
            return null;
          }
        } else if (row === this.currentRow) {
          return this.currentNode;
        } else {
          // row > this.currentRow
          if (this.currentNode.right) {
            this.descendRight();
          } else {
            return null;
          }
        }
      }
    }
  }, {
    key: "getPointWithMaxLineLength",
    value: function getPointWithMaxLineLength() {
      this.reset();

      if (!this.currentNode) return null;

      var maxLineLength = this.currentNode.maxLineLength;
      while (true) {
        if (this.currentNode.lineLength === maxLineLength) {
          return { row: this.currentRow, column: maxLineLength };
        } else if (this.currentNode.left && this.currentNode.left.maxLineLength === maxLineLength) {
          this.descendLeft();
        } else {
          this.descendRight();
        }
      }
    }
  }, {
    key: "setCurrentNode",
    value: function setCurrentNode(node) {
      this.currentNode = node;
      if (this.currentNode) {
        this.currentRow = this.leftAncestorRow + this.currentNode.getLeftSubtreeSize() + 1;
      }
    }
  }, {
    key: "descendLeft",
    value: function descendLeft() {
      this.pushToAncestorStacks();
      this.setCurrentNode(this.currentNode.left);
    }
  }, {
    key: "descendRight",
    value: function descendRight() {
      this.pushToAncestorStacks();
      this.leftAncestor = this.currentNode;
      this.leftAncestorRow = this.currentRow;
      this.setCurrentNode(this.currentNode.right);
    }
  }, {
    key: "pushToAncestorStacks",
    value: function pushToAncestorStacks() {
      this.leftAncestorStack.push(this.leftAncestor);
      this.leftAncestorRowStack.push(this.leftAncestorRow);
    }
  }]);

  return Iterator;
})();

exports["default"] = Iterator;
module.exports = exports["default"];