"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var idCounter = 0;

var Node = (function () {
  function Node(lineLength, left, right, priority) {
    _classCallCheck(this, Node);

    this.lineLength = lineLength;
    this.left = left;
    this.right = right;
    this.priority = priority;
    this.id = ++idCounter;
    this.parent = null;

    this.computeSubtreeProperties();
  }

  _createClass(Node, [{
    key: "computeSubtreeProperties",
    value: function computeSubtreeProperties() {
      var leftSubtreeSize = this.left ? this.left.subtreeSize : 0;
      var rightSubtreeSize = this.right ? this.right.subtreeSize : 0;
      this.subtreeSize = leftSubtreeSize + 1 + rightSubtreeSize;

      var leftMax = this.left ? this.left.maxLineLength : -1;
      var rightMax = this.right ? this.right.maxLineLength : -1;
      this.maxLineLength = Math.max(leftMax, this.lineLength, rightMax);
    }
  }, {
    key: "getLeftSubtreeSize",
    value: function getLeftSubtreeSize() {
      if (this.left) {
        return this.left.subtreeSize;
      } else {
        return 0;
      }
    }
  }]);

  return Node;
})();

exports["default"] = Node;
module.exports = exports["default"];